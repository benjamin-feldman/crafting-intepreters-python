import os


def define_ast(output_dir: str, base_name: str, base_class_name: str, types: list[str]):
    os.makedirs(output_dir, exist_ok=True)

    path = f"{output_dir}/{base_name}.py"
    print(path)

    with open(path, "w") as f:
        f.write("#####################################\n")
        f.write("# GENERATED BY tool/generate_ast.py #\n")
        f.write("#####################################\n\n")
        f.write("from abc import ABC, abstractmethod\n")
        f.write("from typing import TypeVar, override\n")
        f.write("from src import *\n")
        f.write("\n\n")

        f.write('R = TypeVar("R")\n\n\n')

        visitor_class_name = f"{base_class_name}Visitor"

        f.write(f"class {visitor_class_name}[R](ABC):\n")
        for token_type in types:
            class_name = token_type.split("=")[0].strip()
            f.write("\t@abstractmethod\n")
            f.write(
                f'\tdef visit_{class_name.lower()}_{base_class_name.lower()}(self, {base_class_name.lower()}: "{class_name}") -> R: ...\n'
            )
        f.write("\n\n")
        f.write(f"class {base_class_name}(ABC):\n")
        f.write(f"\t@abstractmethod\n")
        f.write(f"\tdef accept(self, visitor: {visitor_class_name}[R]) -> R: ...\n")
        f.write(f"\n\n")

        for token_type in types:
            class_name = token_type.split("=")[0].strip()
            fields = token_type.split("=")[1].strip()
            f.write(f"class {class_name}({base_class_name}):\n")
            f.write(f"\tdef __init__(self, {fields}):\n")
            field_list = fields.split(",")
            for field in field_list:
                field_name = field.split(":")[0].strip()
                f.write(f"\t\tself.{field_name} = {field_name}\n")
            f.write(f"\t\n")
            f.write(f"\t@override\n")
            f.write(f"\tdef accept(self, visitor: {visitor_class_name}[R]) -> R:\n")
            f.write(
                f"\t\treturn visitor.visit_{class_name.lower()}_{base_class_name.lower()}(self)\n"
            )
            f.write("\n\n")


if __name__ == "__main__":
    define_ast(
        "src",
        "expr",
        "Expr",
        [
            "Assign   = name: Token, value: Expr",
            "Binary   = left: Expr, operator: Token, right: Expr",
            "Grouping = expression: Expr",
            "Literal  = value: object",
            "Unary    = operator: Token, right: Expr",
            "Variable = name: Token",
        ],
    )

    define_ast(
        "src",
        "stmt",
        "Stmt",
        [
            "ExpressionStmt = expression: Expr",
            "PrintStmt      = expression: Expr",
            "Var            = name: Token, initializer: Expr | None",
        ],
    )
