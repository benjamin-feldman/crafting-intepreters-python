#####################################
# GENERATED BY tool/generate_ast.py #
#####################################

from abc import ABC, abstractmethod
from typing import TypeVar, override
from src import *


R = TypeVar("R")


class StmtVisitor[R](ABC):
    @abstractmethod
    def visit_expression_stmt(self, stmt: "Expression") -> R: ...
    @abstractmethod
    def visit_print_stmt(self, stmt: "Print") -> R: ...


class Stmt(ABC):
    @abstractmethod
    def accept(self, visitor: StmtVisitor[R]) -> R: ...


class Expression(Stmt):
    def __init__(self, expression: Expr):
        self.expression = expression

    @override
    def accept(self, visitor: StmtVisitor[R]) -> R:
        return visitor.visit_expression_stmt(self)


class Print(Stmt):
    def __init__(self, expression: Expr):
        self.expression = expression

    @override
    def accept(self, visitor: StmtVisitor[R]) -> R:
        return visitor.visit_print_stmt(self)
